<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>XSPedition</title>

    @Scripts.Render("~/bundles/vis")
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script src="~/Scripts/jquery-ui-1.12.1.js"></script>
    <script src="~/Scripts/knockout-3.4.2.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.2.js"></script>
    <script src="~/signalr/hubs"></script>
    <link href="~/Content/index.css" rel="stylesheet">
</head>
<body>
    <div class="js-draggable container body-content ui-widget-content">
        <div class="text-center">
            <h1>Corporate Action Lifecycle</h1>
        </div>

        <div id="timeline" class="outlined"></div>

        <div data-bind="foreach: processes" class="processes-container outlined">
            <div data-bind="attr: { id: id }" class="processes-item process-container outlined">

                <h4 data-bind="text: title" class="justified"></h4>

                <div class="process-item justified">
                    <div class="text-bold">Target date:</div>
                    <ul data-bind="foreach: targetDateItems">
                        <li data-bind="text: $data"></li>
                    </ul>
                </div>

                <div class="process-item justified">
                    <div class="text-bold">Critical date:</div>
                    <ul data-bind="foreach: criticalDateItems">
                        <li data-bind="text: $data"></li>
                    </ul>
                </div>
                <div class="justified" data-bind="text: processProgressLabel">

                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        $(function () {
            $(".js-draggable").draggable();

            var notif = $.connection.NotificationHub;

            notif.client.updateProcess = function (data) {
                var process = ko.utils.arrayFirst(viewModel.processes(), function (proc) {
                    return proc.id === data.id;
                });

                if (process) {
                    viewModel.processes.replace(process, new Process(data.id, data.title, data.targetDateItems, data.criticalDateItems, data.processActionName, data.totalItemCount, data.processedItemCount, data.processPercentage));
                }
            };

            $.connection.hub.start();
        }());

        function Process(id, title, targetDateItems, criticalDateItems, processActionName, totalItemCount, processedItemCount, processPercentage) {
            this.id = id;
            this.title = title;
            this.targetDateItems = targetDateItems;
            this.criticalDateItems = criticalDateItems;
            this.processActionName = processActionName;
            this.totalItemCount = totalItemCount ? totalItemCount : 0;
            this.processedItemCount = processedItemCount ? processedItemCount : 0;
            this.processPercentage = typeof processPercentage === "undefined" ? 100 : processPercentage;

            this.processProgressLabel = ko.pureComputed(function () {
                return this.processActionName + ": " + this.processedItemCount + "/" + this.totalItemCount + " (" + this.processPercentage.toFixed(2) + "%)";
            }, this);
        }

        function AppViewModel() {
            this.processes = ko.observableArray();
        }

        var viewModel = new AppViewModel();
        viewModel.processes([
            new Process("scrub", "CA Scrubbing", [], [], "Scrubbed"),
            new Process("notif", "Notification", [], [], "Sent"),
            new Process("respo", "Response", [], [], "Submitted"),
            new Process("instr", "Instruction", [], [], "Instructed"),
            new Process("payme", "Payment", [], [], "Settled")
        ]);

        ko.applyBindings(viewModel);

        var container = document.getElementById("timeline");
        var data = [];
        var options = {};
        var timeline = new vis.Timeline(container, data, options);
    </script>
</body>
</html>
